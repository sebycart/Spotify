[["index.html", "Spotify Analysis Chapter 1 Introduction", " Spotify Analysis Sebastian Carter &amp; Yinda Qian 2022-05-03 Chapter 1 Introduction "],["data-sources.html", "Chapter 2 Data sources", " Chapter 2 Data sources We sourced our data from Spotify’s API. Spotify manages its API and provides extensive documentation on its variables, etc. Generally speaking, the Spotify API is used by developers to collect information on musical artists, songs, albums, etc. The API provides data on specific artists - such as their followers, popularity, discography, etc. - and on the music in whatever form it is in (songs, albums, playlists). The data on the music includes audio features, such as ‘danceability’, ‘energy’, ‘speechiness’, ‘key’, and more. Clearly, many of the features in the Spotify API data are the output of Spotify’s proprietary algorithms – for example, how you measure “danceability” depends on a number of factors that Spotify have chosen at their discretiono. Another variable we used throughout our project was ‘popularity’. Artists have a popularity rating, as do albums and songs. Spotify does not provide any specific details on how their algorithms calculate this metric, however we do know that it is dependent on number of listens as well as how recent those listens are. As with most API’s, many of these metrics are updated continuously – for example, an artist’s number of followers will change, but the audio features of one of their songs will not. All of the information we are able to pull from the API is the latest data, i.e. we cannot see historical data, such as how an artist’s popularity has changed over time. In this project we used the SpotifyR package to pull data from the API. SpotifyR is a very useful R wrapper for the Spotify Web API. The package was last updated in November 2021 and it contains a number of useful functions that streamlined the data collection process of this project. The primary functions we used were the following: get_genre_artists() This function pulls the most popular artists (as determined by Spotify) in a specific genre and market (country). We used this function to pull the 20 most popular rap and country artists across 8 different markets. Each row in this data equates to an artist. get_artist_top_tracks() This function allows you to pull the top/most popular tracks of an artist (you can choose the number of tracks). We fed in the artist id’s from the get_genre_artists() data and got the top 10 tracks for each of the top 20 rap artists in each country – around 200 tracks for each of the 8 countries country (1600 rap songs total). So in this dataset each row equates to a track/song. Each song has information on its release date, which album its in (if its on an album), its popularity, its duration, the artists on the track, whether it’s explicit or not, and more. get_audio_features() This function was useful in getting the audio features of each track. Each track has audio data such as danceability, loudness, acousticness, energy, and more. After using these functions, we have a few main datasets. The rap and country datasets have around 1600 rows each and each row is a different song. Within these datasets, we have 200 songs for 8 countries, i.e. the top rappers and country artist’s top songs. We chose 8 different markets to explore and we aimed to cover a variety of languages, regions and cultures. We chose USA, Great Britain, Mexico, India, Japan, Korea, France, and Ghana. We were limited to countries that have Spotify of course, so that is why China was not included. Moreover, we picked Ghana because, as far as African countries go, Spotify is popular there. And we picked Mexico for a similar reason. As stated earlier, the API does not provide historical data, which would have been useful in our analysis. Other than this shortcoming, there are no known problems with this data. Of course, when using the Spotify data for analysis, one must be aware that many metrics are the results of Spotify’s proprietary algorithms. For a peak into the data, see below the first five tracks in our main dataset. ## artists ## 1 https://api.spotify.com/v1/artists/15UsOTVnJzReFVN1VCnxy4, 15UsOTVnJzReFVN1VCnxy4, XXXTENTACION, artist, spotify:artist:15UsOTVnJzReFVN1VCnxy4, https://open.spotify.com/artist/15UsOTVnJzReFVN1VCnxy4 ## 2 https://api.spotify.com/v1/artists/15UsOTVnJzReFVN1VCnxy4, 15UsOTVnJzReFVN1VCnxy4, XXXTENTACION, artist, spotify:artist:15UsOTVnJzReFVN1VCnxy4, https://open.spotify.com/artist/15UsOTVnJzReFVN1VCnxy4 ## 3 https://api.spotify.com/v1/artists/15UsOTVnJzReFVN1VCnxy4, 15UsOTVnJzReFVN1VCnxy4, XXXTENTACION, artist, spotify:artist:15UsOTVnJzReFVN1VCnxy4, https://open.spotify.com/artist/15UsOTVnJzReFVN1VCnxy4 ## 4 https://api.spotify.com/v1/artists/15UsOTVnJzReFVN1VCnxy4, 15UsOTVnJzReFVN1VCnxy4, XXXTENTACION, artist, spotify:artist:15UsOTVnJzReFVN1VCnxy4, https://open.spotify.com/artist/15UsOTVnJzReFVN1VCnxy4 ## 5 https://api.spotify.com/v1/artists/15UsOTVnJzReFVN1VCnxy4, 15UsOTVnJzReFVN1VCnxy4, XXXTENTACION, artist, spotify:artist:15UsOTVnJzReFVN1VCnxy4, https://open.spotify.com/artist/15UsOTVnJzReFVN1VCnxy4 ## 6 https://api.spotify.com/v1/artists/15UsOTVnJzReFVN1VCnxy4, https://api.spotify.com/v1/artists/6Xgp2XMz1fhVYe7i6yNAax, 15UsOTVnJzReFVN1VCnxy4, 6Xgp2XMz1fhVYe7i6yNAax, XXXTENTACION, Trippie Redd, artist, artist, spotify:artist:15UsOTVnJzReFVN1VCnxy4, spotify:artist:6Xgp2XMz1fhVYe7i6yNAax, https://open.spotify.com/artist/15UsOTVnJzReFVN1VCnxy4, https://open.spotify.com/artist/6Xgp2XMz1fhVYe7i6yNAax ## disc_number duration_ms explicit ## 1 1 120026 TRUE ## 2 1 110886 TRUE ## 3 1 119133 TRUE ## 4 1 95466 TRUE ## 5 1 166605 TRUE ## 6 1 146520 TRUE ## href ## 1 https://api.spotify.com/v1/tracks/5TXDeTFVRVY7Cvt0Dw4vWW ## 2 https://api.spotify.com/v1/tracks/2ZRo7axmMPeSVUvDbGkJah ## 3 https://api.spotify.com/v1/tracks/7m9OqQk4RVRkw9JJdeAw96 ## 4 https://api.spotify.com/v1/tracks/3GVkPk8mqxz0itaAriG1L7 ## 5 https://api.spotify.com/v1/tracks/3ee8Jmje8o58CHK66QrVC2 ## 6 https://api.spotify.com/v1/tracks/7AQim7LbvFVZJE3O8TYgf2 ## id is_local is_playable ## 1 5TXDeTFVRVY7Cvt0Dw4vWW FALSE TRUE ## 2 2ZRo7axmMPeSVUvDbGkJah FALSE TRUE ## 3 7m9OqQk4RVRkw9JJdeAw96 FALSE TRUE ## 4 3GVkPk8mqxz0itaAriG1L7 FALSE TRUE ## 5 3ee8Jmje8o58CHK66QrVC2 FALSE TRUE ## 6 7AQim7LbvFVZJE3O8TYgf2 FALSE TRUE ## name popularity ## 1 Revenge 84 ## 2 Hope 83 ## 3 Jocelyn Flores 82 ## 4 Everybody Dies In Their Nightmares 82 ## 5 SAD! 82 ## 6 Fuck Love (feat. Trippie Redd) 81 ## preview_url ## 1 https://p.scdn.co/mp3-preview/f5096665f4f47142d704ee0ce47a8df26d256ad8?cid=2c522ebeb84f4aa189ec93288a41d97f ## 2 &lt;NA&gt; ## 3 https://p.scdn.co/mp3-preview/99ae2de8b5e6c95349a9775948f65a331ca2a329?cid=2c522ebeb84f4aa189ec93288a41d97f ## 4 https://p.scdn.co/mp3-preview/245bdb86c13c1a8eee8fdb4f4a82111d6bf0a3fb?cid=2c522ebeb84f4aa189ec93288a41d97f ## 5 &lt;NA&gt; ## 6 https://p.scdn.co/mp3-preview/c82958b8b135299e17cb3465048032e6dc7fc98e?cid=2c522ebeb84f4aa189ec93288a41d97f ## track_number type uri album.album_type ## 1 5 track spotify:track:5TXDeTFVRVY7Cvt0Dw4vWW album ## 2 16 track spotify:track:2ZRo7axmMPeSVUvDbGkJah album ## 3 2 track spotify:track:7m9OqQk4RVRkw9JJdeAw96 album ## 4 4 track spotify:track:3GVkPk8mqxz0itaAriG1L7 album ## 5 4 track spotify:track:3ee8Jmje8o58CHK66QrVC2 album ## 6 8 track spotify:track:7AQim7LbvFVZJE3O8TYgf2 album ## album.artists ## 1 https://api.spotify.com/v1/artists/15UsOTVnJzReFVN1VCnxy4, 15UsOTVnJzReFVN1VCnxy4, XXXTENTACION, artist, spotify:artist:15UsOTVnJzReFVN1VCnxy4, https://open.spotify.com/artist/15UsOTVnJzReFVN1VCnxy4 ## 2 https://api.spotify.com/v1/artists/15UsOTVnJzReFVN1VCnxy4, 15UsOTVnJzReFVN1VCnxy4, XXXTENTACION, artist, spotify:artist:15UsOTVnJzReFVN1VCnxy4, https://open.spotify.com/artist/15UsOTVnJzReFVN1VCnxy4 ## 3 https://api.spotify.com/v1/artists/15UsOTVnJzReFVN1VCnxy4, 15UsOTVnJzReFVN1VCnxy4, XXXTENTACION, artist, spotify:artist:15UsOTVnJzReFVN1VCnxy4, https://open.spotify.com/artist/15UsOTVnJzReFVN1VCnxy4 ## 4 https://api.spotify.com/v1/artists/15UsOTVnJzReFVN1VCnxy4, 15UsOTVnJzReFVN1VCnxy4, XXXTENTACION, artist, spotify:artist:15UsOTVnJzReFVN1VCnxy4, https://open.spotify.com/artist/15UsOTVnJzReFVN1VCnxy4 ## 5 https://api.spotify.com/v1/artists/15UsOTVnJzReFVN1VCnxy4, 15UsOTVnJzReFVN1VCnxy4, XXXTENTACION, artist, spotify:artist:15UsOTVnJzReFVN1VCnxy4, https://open.spotify.com/artist/15UsOTVnJzReFVN1VCnxy4 ## 6 https://api.spotify.com/v1/artists/15UsOTVnJzReFVN1VCnxy4, 15UsOTVnJzReFVN1VCnxy4, XXXTENTACION, artist, spotify:artist:15UsOTVnJzReFVN1VCnxy4, https://open.spotify.com/artist/15UsOTVnJzReFVN1VCnxy4 ## album.href ## 1 https://api.spotify.com/v1/albums/5VdyJkLe3yvOs0l4xXbWp0 ## 2 https://api.spotify.com/v1/albums/2Ti79nwTsont5ZHfdxIzAm ## 3 https://api.spotify.com/v1/albums/5VdyJkLe3yvOs0l4xXbWp0 ## 4 https://api.spotify.com/v1/albums/5VdyJkLe3yvOs0l4xXbWp0 ## 5 https://api.spotify.com/v1/albums/2Ti79nwTsont5ZHfdxIzAm ## 6 https://api.spotify.com/v1/albums/5VdyJkLe3yvOs0l4xXbWp0 ## album.id ## 1 5VdyJkLe3yvOs0l4xXbWp0 ## 2 2Ti79nwTsont5ZHfdxIzAm ## 3 5VdyJkLe3yvOs0l4xXbWp0 ## 4 5VdyJkLe3yvOs0l4xXbWp0 ## 5 2Ti79nwTsont5ZHfdxIzAm ## 6 5VdyJkLe3yvOs0l4xXbWp0 ## album.images ## 1 640, 300, 64, https://i.scdn.co/image/ab67616d0000b273203c89bd4391468eea4cc3f5, https://i.scdn.co/image/ab67616d00001e02203c89bd4391468eea4cc3f5, https://i.scdn.co/image/ab67616d00004851203c89bd4391468eea4cc3f5, 640, 300, 64 ## 2 640, 300, 64, https://i.scdn.co/image/ab67616d0000b273806c160566580d6335d1f16c, https://i.scdn.co/image/ab67616d00001e02806c160566580d6335d1f16c, https://i.scdn.co/image/ab67616d00004851806c160566580d6335d1f16c, 640, 300, 64 ## 3 640, 300, 64, https://i.scdn.co/image/ab67616d0000b273203c89bd4391468eea4cc3f5, https://i.scdn.co/image/ab67616d00001e02203c89bd4391468eea4cc3f5, https://i.scdn.co/image/ab67616d00004851203c89bd4391468eea4cc3f5, 640, 300, 64 ## 4 640, 300, 64, https://i.scdn.co/image/ab67616d0000b273203c89bd4391468eea4cc3f5, https://i.scdn.co/image/ab67616d00001e02203c89bd4391468eea4cc3f5, https://i.scdn.co/image/ab67616d00004851203c89bd4391468eea4cc3f5, 640, 300, 64 ## 5 640, 300, 64, https://i.scdn.co/image/ab67616d0000b273806c160566580d6335d1f16c, https://i.scdn.co/image/ab67616d00001e02806c160566580d6335d1f16c, https://i.scdn.co/image/ab67616d00004851806c160566580d6335d1f16c, 640, 300, 64 ## 6 640, 300, 64, https://i.scdn.co/image/ab67616d0000b273203c89bd4391468eea4cc3f5, https://i.scdn.co/image/ab67616d00001e02203c89bd4391468eea4cc3f5, https://i.scdn.co/image/ab67616d00004851203c89bd4391468eea4cc3f5, 640, 300, 64 ## album.name album.release_date album.release_date_precision album.total_tracks ## 1 17 2017-08-25 day 11 ## 2 ? 2018-03-16 day 18 ## 3 17 2017-08-25 day 11 ## 4 17 2017-08-25 day 11 ## 5 ? 2018-03-16 day 18 ## 6 17 2017-08-25 day 11 ## album.type album.uri ## 1 album spotify:album:5VdyJkLe3yvOs0l4xXbWp0 ## 2 album spotify:album:2Ti79nwTsont5ZHfdxIzAm ## 3 album spotify:album:5VdyJkLe3yvOs0l4xXbWp0 ## 4 album spotify:album:5VdyJkLe3yvOs0l4xXbWp0 ## 5 album spotify:album:2Ti79nwTsont5ZHfdxIzAm ## 6 album spotify:album:5VdyJkLe3yvOs0l4xXbWp0 ## album.external_urls.spotify external_ids.isrc ## 1 https://open.spotify.com/album/5VdyJkLe3yvOs0l4xXbWp0 USUYG1156895 ## 2 https://open.spotify.com/album/2Ti79nwTsont5ZHfdxIzAm USUG11800447 ## 3 https://open.spotify.com/album/5VdyJkLe3yvOs0l4xXbWp0 USUYG1156892 ## 4 https://open.spotify.com/album/5VdyJkLe3yvOs0l4xXbWp0 USUYG1156894 ## 5 https://open.spotify.com/album/2Ti79nwTsont5ZHfdxIzAm USUG11800208 ## 6 https://open.spotify.com/album/5VdyJkLe3yvOs0l4xXbWp0 USUYG1156898 ## external_urls.spotify genre country ## 1 https://open.spotify.com/track/5TXDeTFVRVY7Cvt0Dw4vWW rap IN ## 2 https://open.spotify.com/track/2ZRo7axmMPeSVUvDbGkJah rap IN ## 3 https://open.spotify.com/track/7m9OqQk4RVRkw9JJdeAw96 rap IN ## 4 https://open.spotify.com/track/3GVkPk8mqxz0itaAriG1L7 rap IN ## 5 https://open.spotify.com/track/3ee8Jmje8o58CHK66QrVC2 rap IN ## 6 https://open.spotify.com/track/7AQim7LbvFVZJE3O8TYgf2 rap IN ## restrictions.reason ## 1 &lt;NA&gt; ## 2 &lt;NA&gt; ## 3 &lt;NA&gt; ## 4 &lt;NA&gt; ## 5 &lt;NA&gt; ## 6 &lt;NA&gt; Also see below the full set of audio features that Spotify calculates and provides for each track. Two example tracks are shown below. ## # A tibble: 2 × 18 ## danceability energy key loudness mode speechiness acousticness ## &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.616 0.438 1 -5.97 1 0.0298 0.356 ## 2 0.949 0.661 5 -4.24 0 0.0572 0.0302 ## # … with 11 more variables: instrumentalness &lt;int&gt;, liveness &lt;dbl&gt;, ## # valence &lt;dbl&gt;, tempo &lt;dbl&gt;, type &lt;chr&gt;, id &lt;chr&gt;, uri &lt;chr&gt;, ## # track_href &lt;chr&gt;, analysis_url &lt;chr&gt;, duration_ms &lt;int&gt;, ## # time_signature &lt;int&gt; "],["data-transformation.html", "Chapter 3 Data transformation", " Chapter 3 Data transformation As described in Data sources, we used three main functions from the SpotifyR package to pull the data from the web API. Then, we conducted data manipulation and transformation to rework the data into a form we could use. In order to compare rap and country music listening trends across 8 different markets, we needed to use the get_genre_artists() function to pull the top artists in each market and genre, and then we needed get_artist_top_tracks() to get the top artists’ most popular tracks. To streamline this process, we created a function to read in the artist data, then pull each artist ID, which was then inputted into the get_artist_top_tracks(). This function required providing the country’s ISO code – for example Mexico’s ISO code is “MX”. So, we created 16 datasets using the function, one for rap and one for country for each market (2 x 8). Each dataset contains around 200 songs. The reason they do not contain exactly 200 songs is that the top artists tend to work with one another, so one artists most popular song might also be another artist’s most popular song. So we removed duplicate songs so as to not skew the data analysis. After we created the 16 datasets, we used rbind to bind them together and create our main dataset, which we used for most of the plots. This dataset includes information on each track and its artist – such as its popularity, release date, album name, its position in the album, whether it was released as a single or part of an album and more. The function below is included for explanation purposes. First, it calls the top rap artists in a given market. Then, it iterates through that dataset and pulls each artist ID. The artist ID is inputted into the get_artist_top_tracks() function to pull that artist’s most popular songs. Then, the result is a dataset for a given market with around 200 rap songs popular in a market, such as Ghana, Mexico, etc. rap_toptracks = function(countrycode){ rap = get_genre_artists(genre = &quot;rap&quot;, market = countrycode) for(i in 1:nrow(rap)){ rapid = rap$id[i] artist_top_tracks = get_artist_top_tracks(rapid, market = countrycode) if(i ==1){ rap_topartist_toptracks = artist_top_tracks } else{ rap_topartist_toptracks = rbind(rap_topartist_toptracks,artist_top_tracks) } } As will be discussed more later, Korea did not output any songs when we used the genre name “rap”, therefore we had to use “k-rap” to get the most popular rappers in Korea. "],["missing-values.html", "Chapter 4 Missing values", " Chapter 4 Missing values Fortunately, our dataset does not have too many NA’s where it matters. As we obtained our data through Spotify’s API, most of the variables we are interested in contain information on an artist or a song. This information is the most current data available - including the popularity of an artist or the audio features of a song. Most of these variables are generated by Spotify automatically, and therefore we rarely see unavailable data. The following NA analysis is conducted on our main dataset that brings together the most popular rap and country songs across 8 different markets. Each row is a different track, and for each track we have information on its popularity, audio features, release date, song length, etc. In the following plot, we can see two columns that are populated with NA’s (marked as yellow). The column that is almost entirely NA values is the restrictions.reason variable. The other column with NA’s is the preview_url column, which basically contains a url with a preview of each track. Clearly, many tracks do not have such information, and this is likely due to music rights and/or label restrictions. Clearly there is an issue with the restrictions.reason column. This variable indicates whether a track is subject to restrictions in a given market. The plot below breaks down the number of NA’s per market (8 total), and it clearly shows Korea has the least amount of NA’s whereas the others only have NA’s. Korea has restrictions on certain explicit music (we will discuss this more later on), so we can conclude that if a track has an NA value, then the market doesn’t have a restriction, whereas if there is an NA value we can predict the track was released in the Korean market. The following plot shows that there are no complete rows, but that the NA’s are only present in two variables. On the right we see almost 60% of rows are missing data in the restrictions.reason column only, almost 50% of rows are missing data in both columns, and a very small amount are missing data in the preview_url column only. "],["results.html", "Chapter 5 Results", " Chapter 5 Results "],["interactive-component.html", "Chapter 6 Interactive component", " Chapter 6 Interactive component "],["conclusion.html", "Chapter 7 Conclusion", " Chapter 7 Conclusion "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
